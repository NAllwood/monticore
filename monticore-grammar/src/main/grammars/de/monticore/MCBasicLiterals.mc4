/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/**
 * This grammar defines Java compliant literals. The scope of this grammar is to
 * ease the reuse of literals structures in Java-like sublanguages, e.g., by 
 * grammar inheritance or grammar embedment.
 * The grammar contains literals from Java, e.g., Boolean, Char, String, ....
*/

component grammar MCBasicLiterals extends de.monticore.MCBasics {

  /*========================================================================*/
  /*======================= AST DEFINITIONS ================================*/
  /*========================================================================*/

  astrule BooleanLiteral =
    method public boolean getValue() {
      return this.source == ASTConstantsMCBasicLiterals.TRUE;
    }
  ;

  astrule CharLiteral = 
    method public char getValue() {
      return de.monticore.MCLiteralsDecoder.decodeChar(getSource());
    }
  ;

  astrule StringLiteral = 
    method public String getValue() {
      return de.monticore.MCLiteralsDecoder.decodeString(getSource());
    }
  ;

   astrule NatLiteral = 
    method public int getValue() {
      return de.monticore.MCLiteralsDecoder.decodeInt(getSource());
    }
  ;

  astrule SignedNatLiteral = 
    method public int getValue() {
      if (negative) {
        return - de.monticore.MCLiteralsDecoder.decodeInt(getSource());
      }
      return de.monticore.MCLiteralsDecoder.decodeInt(getSource());
    }
  ;


  /*========================================================================*/
  /*======================= INTERFACE DEFINITIONS ==========================*/
  /*========================================================================*/

  /** ASTLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals)
    */
  interface Literal;


  /** ASTSignedLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals).
        Compared to Literal it also includes negative NumericLiterals
    */
  interface SignedLiteral;


  /** The interface ASTNumericLiteral combines the numeric literal types for
        Integer, Long, Float and Double
    */
  interface NumericLiteral extends Literal;


  /** The interface ASTNumericLiteral combines the numeric literal types for
        Integer, Long, Float and Double.
        Compared to NumericLiteral it also includes negative numbers.
    */
  interface SignedNumericLiteral extends SignedLiteral;


  /*========================================================================*/
  /*============================ PARSER RULES ==============================*/
  /*========================================================================*/
  
  /** ASTNullLiteral represents 'null'
    */
  NullLiteral implements Literal, SignedLiteral =
    "null";


  /** ASTBooleanLiteral represents "true" or "false"
        @attribute source String-representation (including '"').
    */
  BooleanLiteral implements Literal, SignedLiteral =
    source:["true" | "false"];


  /** ASTCharLiteral represents any valid character parenthesized with "'".
        @attribute source String-representation (including "'").
    */
  CharLiteral implements Literal, SignedLiteral =
    source:Char;


  /** ASTStringLiteral represents any valid character sequence parenthesized
        with '"'.
        @attribute source String-representation (including '"').
    */
  StringLiteral implements Literal, SignedLiteral =
    source:String;


  /** ASTNatLiteral represents a positive Decimal number.
        @attribute source String-representation (including '"').
    */
  NatLiteral implements NumericLiteral<1> =
    source:Digits;

  /** ASTSignedNatLiteral represents a positive or negative Decimal number.
        @attribute source String-representation (including '"').
    */
  SignedNatLiteral implements SignedNumericLiteral<1> =
     (negative:["-"])? source:Digits;


  /*========================================================================*/
  /*============================ LEXER RULES ===============================*/
  /*========================================================================*/
  

  /*========================================================================*/
  /* The following section is adapted from                                  */
  /* https://github.com/antlr/grammars-v4/blob/master/java/Java.g4          */
  /*========================================================================*/
  
  // ยง3.10.1 Integer Literals

  token Digits
    = Digit+;

  fragment token Digit
    = '0'..'9';

  // ยง3.10.4 Character Literals
  token Char
    = '\'' (SingleCharacter|EscapeSequence) '\''
    : {setText(getText().substring(1, getText().length() - 1));};

  fragment token SingleCharacter
    = ~ ('\'');


  // ยง3.10.5 String Literals
  token String
    = '"' (StringCharacters)? '"'
    : {setText(getText().substring(1, getText().length() - 1));};

  fragment token StringCharacters
    = (StringCharacter)+;

  fragment token StringCharacter
    = ~ ('"' | '\\') | EscapeSequence;

  // ยง3.10.6 Escape Sequences for Character and String Literals
  fragment token EscapeSequence
    = '\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\'' | '\\') | OctalEscape | UnicodeEscape;

  fragment token OctalEscape
    = '\\' OctalDigit | '\\' OctalDigit OctalDigit | '\\' ZeroToThree OctalDigit OctalDigit;

  fragment token UnicodeEscape
    = '\\' 'u' HexDigit HexDigit HexDigit HexDigit;

  fragment token ZeroToThree
    = '0'..'3' ;

 fragment token HexDigit
    = '0'..'9'  | 'a'..'f'  | 'A'..'F' ;

 fragment token OctalDigit
    = '0'..'7' ;


}

