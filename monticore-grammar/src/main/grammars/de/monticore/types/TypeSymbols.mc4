/* (c) https://github.com/MontiCore/monticore */

package de.monticore.types;

component grammar TypeSymbols extends de.monticore.MCBasics {

  interface scope symbol  Type = Name ;
  symbolrule Type =
    methods: de.monticore.types.typesymbols._symboltable.MethodSymbol*
    fields: de.monticore.types.typesymbols._symboltable.FieldSymbol*
    typeParameter: de.monticore.types.typesymbols._symboltable.TypeVarSymbol*
  ;

  interface TypeVar = Name;
  symbolrule TypeVar =
    upperBound: de.monticore.typescalculator.TypeExpression*
  ;

  interface symbol  Field = Name ;
  symbolrule  Field =
    type: de.monticore.typescalculator.TypeExpression
  ;

  interface scope symbol  Method = Name;
  symbolrule Method =
    parameter: de.monticore.types.typesymbols._symboltable.FieldSymbol*
    type: de.monticore.typescalculator.TypeExpression
  ;
}