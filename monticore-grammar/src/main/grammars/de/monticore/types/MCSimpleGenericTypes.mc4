/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/**
 * This grammar introduces self-defined generic reference types
*/
component grammar MCSimpleGenericTypes
       extends de.monticore.types.MCCollectionTypes {

  start MCType;

  /** ASTMCCollectionTypesType represents types like class or interface
  *   types which could have a qualified name like this: a.b.C<Arg>. The
  *   qualification stored in the name (a.b) could be package (or a type
  *   name in case of inner classes). The qualified name could contain type
  *   arguments only at the end.
  *
  *   @attribute name             Name of the type
  *   @attribute typeArgumentList The types between '<...>'
  */

  MCBasicGenericType implements MCGenericType <20> =
       (Name || ".")+ "<" (MCTypeArgument || ",")* ">";

  /** ASTMCCustomTypeArgument introduces all MCType as TypeArguments
  *   This enables recursive Generics e.g. List<Map<String, socnet.Person>>
  */
  MCCustomTypeArgument implements MCTypeArgument <20> = MCType;

}