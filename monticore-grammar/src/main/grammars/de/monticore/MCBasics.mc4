/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

/**
 * This grammar defines absolute basics, such as spaces,
 * Java-like comments and Names.
 * It should be useful in many languages.
 *
*/

component grammar MCBasics {

  /** Name represents an ordinary (unqualified) name.
      This nonterminal is used as core reference mechanism e.g.
      for symbols.
  */
  token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;
  
  /*=================================================================*/

  fragment token NEWLINE =
    ('\r' '\n' |
    '\r' |
    '\n' ):
  ;

  /** White Spaces.
      They are not added to the parsing token list, but omitted right away.
  */
  token WS =
    (' ' | 
    '\t' |
    '\r' |
    '\n' ) :{_channel = HIDDEN;};
    
  /*=================================================================*/

  /** A single line comment in Java style: //
      Comments are ignored by the parser.
  */
  token SL_COMMENT =
    "//" (~('\n' |
      '\r' )
    )* : ->skip
    // TODO: Replace this in MC 5.0.5 by storeComment()
    {
      if (getCompiler() != null) {
        de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
        de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
        _comment.set_SourcePositionStart(startPos);
        _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
        getCompiler().addComment(_comment);
      }
    };

  /** A multi line comment in Java style.
      The comments are not nested.
      Comments are ignored by the parser.
  */
  token ML_COMMENT =
    "/*" ({_input.LA(2) != '/'}?'*' |
     NEWLINE |
      ~('*' |
      '\n' |
      '\r' )
    )*
    "*/" : -> skip
    // TODO: Replace this in MC 5.0.5 by storeComment()
    {
      if (getCompiler() != null) {
        de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
        de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
        _comment.set_SourcePositionStart(startPos);
        _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
        getCompiler().addComment(_comment);
      }
    };

}
