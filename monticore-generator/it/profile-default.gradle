fileTree(dir: grammarDir, include: '**/*.mc4').each {
  def g = it
  def taskname = file(grammarDir).toURI().relativize(g.toURI()).toString()
  taskname = taskname.substring(0, taskname.lastIndexOf(".")).replaceAll("/", '_')
  task "generate${taskname}"(type: MCTask) {
    grammar = file g
    outputDir = file outDir
    handcodedPath file("$projectDir/src/main/java")
    modelPath file("$projectDir/$grammarDir")
    script file('it.groovy')
    def incCheckDir = file(grammarDir).toURI().relativize(g.toURI()).toString()
    incCheckDir = incCheckDir.substring(0, incCheckDir.lastIndexOf('.')).toLowerCase()
    def uptoDate = incCheck(outputDir.toString() + "/$incCheckDir/IncGenGradleCheck.txt")
    outputs.upToDateWhen { uptoDate }
  }
}

task generatePython(type:MCTask){
  grammar = file "$grammarDir/mc/feature/python3/PythonAutomaton.mc4"
  outputDir = file outDir+"/python"
  handcodedPath file("$projectDir/src/main/java")
  modelPath file("$projectDir/$grammarDir")
  script file('it-python.groovy')
}
